ALGORITHM Dot_product
VAR
 vector :STRUCT
                     x : INTEGER; 
                     y : INTEGER;
                     z : INTEGER;
                 END_STRUCT
 arr1 : ARRAY_OF vector [2];
 arr2 : ARRAY_OF vector [2];
 i,j:INTEGER;
//  procedure calcul_vectors
 PROCEDURE calcul_vector(arr1,arr2)
 VAR
    i,j,product:INTEGER;
    
 BEGIN
     FOR i FROM 0 TO arr1.length-1 STEP 1  DO
       FOR j FROM 0 TO arr2.length-1 STEP 1  DO
                 //  (yv1   *  zv2    -  zv1    *   yv2   )+(zv1     *  xv2    -   xv1   *  zv2     )+(  xv1    * yv2     -   yv1   * xv2     )
        product:=((arr1[i].y*arr2[j].z-arr1[i].z*arr2[j].y)+(arr1[i].z*arr2[j].x-arr1[i].x*arr2[j].z)+(arr1[i].x*arr2[j].y-arr1[i].y*arr2[j].x));
        write("the product of ",arr1[i]," and ",arr2[j]," = ",product);
        IF (prduct=0) THEN
            write("the vectors ",arr1[i]," and ",arr2[j],"is orthogonal")
        END_IF
       END_FOR
     END_FOR
 END
//  function  calcul_vectors
 FUNCTION calcul_vect(v1,v2) : BOOLEAN
 VAR
     product:INTEGER;
 BEGIN
                 //(yv1*zv2 -zv1 *yv2 )+(zv1 *xv2 -xv1 * zv2)+(xv1 *yv2 -yv1 *xv2 )
        product:=((v1.y*v2.z-v1.z*v2.y)+(v1.z*v2.x-v1.x*v2.z)+(v1.x*v2.y-v1.y*v2.x));
        
     IF (product=0) THEN
         Return true;
     ELSE Return false; 
     END_IF
 END
BEGIN
// filling of arr1 and arr2
    FOR i FROM 0 TO 1 STEP 1  DO
        write("x ",i+1," vector = ");
        read(arr1[i].x);
        write("y ",i+1," vector = ");
        read(arr1[i].y);
    END_FOR

    FOR j FROM 0 TO 1 STEP 1  DO
        write("x ",j+1," vector = ");
        read(arr1[j].x);
        write("y ",j+1," vector = ");
        read(arr1[j].y);
    END_FOR
// Result with procedure

calcul_vector(arr1,arr2);

// Result with function 
i:=0;
j:=0;
FOR i FROM 0 TO 1 STEP 1  DO
    FOR j FROM 0 TO 1 STEP 1  DO
        IF (calcul_vect(arr1[i],arr2[j])=true) THEN
            write("the vectors ",arr1[i]," and ",arr2[j],"is orthogonal");
        ELSE 
        write("the vectors ",arr1[i]," and ",arr2[j],"is not orthogonal");
        END_IF 

    END_FOR
END_FOR

END